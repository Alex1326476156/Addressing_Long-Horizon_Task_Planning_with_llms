{"eat chips on the sofa": "# 0: walk to living room\nwalk('livingroom')\n# 1: find chips\nfind('chips')\n# 2: grab chips\nassert('close' to 'chips')\n    else: find('chips')\ngrab('chips')\n# 3: walk to sofa\nwalk('sofa')\n# 4: sit on sofa\nsit('sofa')\n# 5: eat chips\nassert('chips' in 'hands')\n    else: find('chips')\n    else: grab('chips')\n# 6: Done", "put salmon in the fridge": "# 0: walk to kitchen\nwalk('kitchen')\n# 1: find salmon\nfind('salmon')\n# 2: grab salmon\nassert('close' to 'salmon')\n    else: find('salmon')\ngrab('salmon')\n# 3: find fridge\nfind('fridge')\n# 4: open fridge\nassert('close' to 'fridge' )  \n    else: find('fridge')\nassert('fridge' is 'closed' )\n    else: close('fridge')\nopen('fridge')\n# 5: put salmon in fridge\nassert('salmon' in 'hands' )\n    else: find('salmon')\n    else: grab('salmon')\nassert('close' to 'fridge' )  \n    else: find('fridge')\nassert('fridge' is 'opened' )\n    else: open('fridge')\nputin('salmon', 'fridge')\n# 6: close fridge\nassert('close' to 'fridge' )\n    else: find('fridge')\nassert('fridge' is 'opened' )\n    else: open('fridge')\nclose('fridge')\n# 7: Done", "wash the plate": "Here's the continuation of the `wash_the_plate` function:\n\n```python\ndef wash_the_plate():\n    # 0: walk to kitchen\n    walk('kitchen')\n    # 1: find sink\n    find('sink')\n    # 2: turn on faucet\n    find('faucet')\n    find('faucet')\n    find('faucet')\n    assert('close' to 'faucet' )  \n        else: find('faucet')\n    assert('faucet' is 'switchoff' )\n        else: switchoff('faucet')\n    switchon('faucet')\n    # 3: put plate under water\n    find('plate')\n    find('plate')\n    find('plate')\n    assert('close' to 'plate')\n        else: find('plate')\n    grab('plate')\n    find('sink')\n    assert('plate' in 'hands' )\n        else: find('plate')\n        else: grab('plate')\n    assert('close' to 'sink' )  \n        else: find('sink')\n    putin('plate', 'sink')\n    # 4: grab dishwashing liquid\n    find('dishwashingliquid')\n    assert('close' to 'dishwashingliquid')\n        else: find('dishwashingliquid')\n    grab('dishwashingliquid')\n    # 5: put dishwashing liquid on plate\n    find('sink')\n    assert('dishwashingliquid' in 'hands' )\n        else: find('dishwashingliquid')\n        else: grab('dishwashingliquid')\n    assert('close' to 'sink' )  \n        else: find('sink')\n    putin('dishwashingliquid', 'sink')\n    # 6: grab washingsponge\n    find('washingsponge')\n    assert('close' to 'washingsponge')\n        else: find('washingsponge')\n    grab('washingsponge')\n    # 7: start scrubbing plate\n    find('sink')\n    assert('washingsponge' in 'hands' )\n        else: find('washingsponge')\n        else: grab('washingsponge')\n    assert('close' to 'sink' )  \n        else: find('sink')\n    putin('washingsponge', 'sink')\n    # 8: rinse plate off with water 1\n    # 9: dry plate with towel 1\n    # 10: Done\n    find('faucet')\n    assert('close' to 'faucet' )\n        else: find('faucet')\n    assert('faucet' is 'switchon' )\n        else: switchon('faucet')\n    switchoff('faucet')\n```\n\nThis function follows the same structure as the `wash_mug` function, with the steps adjusted to wash a plate instead of a mug.", "bring coffeepot and cupcake to the coffee table": "# 0: walk to kitchen\nwalk('kitchen')\n# 1: find coffeepot\nfind('coffeepot')\n# 2: grab coffeepot\nassert('close' to 'coffeepot')\n    else: find('coffeepot')\ngrab('coffeepot')\n# 3: find cupcake\nfind('cupcake')\n# 4: grab cupcake\nassert('close' to 'cupcake')\n    else: find('cupcake')\ngrab('cupcake')\n# 5: walk to living room\nwalk('livingroom')\n# 6: find coffee table\nfind('coffeetable')\n# 7: put coffeepot on coffee table\nassert('coffeepot' in 'hands')\n    else: find('coffeepot')\n    else: grab('coffeepot')\nassert('close' to 'coffeetable')\n    else: find('coffeetable')\nputin('coffeepot', 'coffeetable')\n# 8: put cupcake on coffee table\nassert('cupcake' in 'hands')\n    else: find('cupcake')\n    else: grab('cupcake')\nassert('close' to 'coffeetable')\n    else: find('coffeetable')\nputin('cupcake', 'coffeetable')\n# 9: Done", "microwave salmon": "To efficiently microwave the salmon, we need to follow these steps:\n\n1. Walk to the kitchen.\n2. Find the microwave.\n3. Open the microwave.\n4. Put the salmon in the microwave.\n5. Close the microwave.\n6. Set the microwave to cook the salmon.\n7. Wait for the microwave to finish cooking.\n8. Open the microwave.\n9. Take out the cooked salmon.\n10. Close the microwave.\n\nNow, let's translate these steps into code using the provided functions:\n\n```python\ndef microwave_salmon():\n    # 0: walk to kitchen\n    walk('kitchen')\n    # 1: find microwave\n    find('microwave')\n    # 2: open microwave\n    find('microwave')\n    assert('close' to 'microwave')\n    else: find('microwave')\n    assert('microwave' is 'closed')\n    else: close('microwave')\n    open('microwave')\n    # 3: put salmon in microwave\n    find('salmon')\n    assert('close' to 'salmon')\n    else: find('salmon')\n    grab('salmon')\n    assert('close' to 'microwave')\n    else: find('microwave')\n    putin('salmon', 'microwave')\n    # 4: close microwave\n    assert('close' to 'microwave')\n    else: find('microwave')\n    assert('microwave' is 'opened')\n    else: open('microwave')\n    close('microwave')\n    # 5: turn on microwave\n    find('microwave')\n    assert('close' to 'microwave')\n    else: find('microwave')\n    assert('microwave' is 'closed')\n    else: close('microwave')\n    open('microwave')\n    assert('salmon' in 'microwave')\n    else: find('salmon')\n    assert('microwave' is 'closed')\n    else: close('microwave')\n    assert('microwave' is 'opened')\n    else: open('microwave')\n    switchon('microwave')\n    # 6: wait for microwave to finish cooking\n    # (Assume some delay or timer function)\n    # 7: open microwave\n    assert('close' to 'microwave')\n    else: find('microwave')\n    assert('microwave' is 'opened')\n    else: open('microwave')\n    # 8: take out cooked salmon\n    assert('salmon' in 'microwave')\n    else: find('salmon')\n    grab('salmon')\n    assert('close' to 'microwave')\n    else: find('microwave')\n    putback('salmon', 'microwave')\n    # 9: close microwave\n    assert('close' to 'microwave')\n    else: find('microwave')\n    assert('microwave' is 'opened')\n    else: open('microwave')\n    close('microwave')\n    # 10: Done\n```\n\nThis code will efficiently microwave the salmon, considering the conditions provided and the limitations of the household robot.", "watch tv": "# 0: walk to living room\nwalk('livingroom')\n# 1: find TV\nfind('tv')\n# 2: turn on TV\nfind('tv')\nassert('close' to 'tv' )  \n    else: find('tv')\nassert('tv' is 'switchoff' )\n    else: switchoff('tv')\nswitchon('tv')\n# 3: sit on sofa\nfind('sofa')\nassert('close' to 'sofa' )  \n    else: find('sofa')\nsit('sofa')\n# 4: watch TV\nwatch('tv')\n# 5: stand up from sofa\nstandup()\n# 6: Done", "turn off light": "# 0: walk to living room\nwalk('livingroom')\n# 1: find light switch\nfind('lightswitch')\n# 2: switch off the light\nassert('close' to 'lightswitch')\n    else: find('lightswitch')\nswitchoff('lightswitch')\n# 3: Done", "brush teeth": "Here's a script for brushing teeth using the provided actions:\n\n```python\ndef brush_teeth():\n    # 0: walk to bathroom\n    walk('bathroom')\n    # 1: find toothbrush\n    find('toothbrush')\n    # 2: grab toothbrush\n    assert('close' to 'toothbrush')\n    else: find('toothbrush')\n    grab('toothbrush')\n    # 3: find toothpaste\n    find('toothpaste')\n    # 4: grab toothpaste\n    assert('close' to 'toothpaste')\n    else: find('toothpaste')\n    grab('toothpaste')\n    # 5: apply toothpaste to toothbrush\n    assert('toothbrush' in 'hands')\n    else: find('toothbrush')\n    else: grab('toothbrush')\n    assert('toothpaste' in 'hands')\n    else: find('toothpaste')\n    else: grab('toothpaste')\n    # 6: start brushing teeth\n    find('sink')\n    assert('toothbrush' in 'hands')\n    else: find('toothbrush')\n    else: grab('toothbrush')\n    assert('toothpaste' in 'hands')\n    else: find('toothpaste')\n    else: grab('toothpaste')\n    putin('toothpaste', 'sink')\n    putin('toothbrush', 'sink')\n    # 7: rinse mouth with water\n    # 8: Done\n```\n\nThis script assumes the availability of a toothbrush and toothpaste in the bathroom. If any of these items are missing, the script will attempt to find them before proceeding.", "throw away apple": "# 0: walk to kitchen\nwalk('kitchen')\n# 1: find garbage can\nfind('garbagecan')\n# 2: grab apple\nfind('apple')\nassert('close' to 'apple')\n    else: find('apple')\ngrab('apple')\n# 3: put apple in garbage can\nfind('garbagecan')\nassert('close' to 'garbagecan' )  \n    else: find('garbagecan')\nassert('garbagecan' is 'closed' )\n    else: close('garbagecan')\nopen('garbagecan')\nassert('apple' in 'hands' )\n    else: find('apple')\n    else: grab('apple')\nassert('close' to 'garbagecan' )  \n    else: find('garbagecan')\nassert('garbagecan' is 'opened' )\n    else: open('garbagecan')\nputin('apple', 'garbagecan')\nassert('close' to 'garbagecan' )\n    else: find('garbagecan')\nassert('garbagecan' is 'opened' )\n    else: open('garbagecan')\nclose('garbagecan')\n# 4: Done", "make toast": "# 0: walk to kitchen\nwalk('kitchen')\n# 1: find toaster\nfind('toaster')\n# 2: find bread slice\nfind('breadslice')\n# 3: grab bread slice\nassert('close' to 'breadslice')\n    else: find('breadslice')\ngrab('breadslice')\n# 4: put bread slice in toaster\nassert('breadslice' in 'hands')\n    else: find('breadslice')\n    else: grab('breadslice')\nassert('close' to 'toaster')\n    else: find('toaster')\nputin('breadslice', 'toaster')\n# 5: turn on toaster\nfind('toaster')\nassert('close' to 'toaster')\n    else: find('toaster')\nswitchon('toaster')\n# 6: wait for toast to finish\n# 7: grab toast\n# 8: Done"}