
----PROMPT for planning----
from actions import turnright, turnleft, walkforward, walktowards <obj>, walk <obj>, run <obj>, grab <obj>, switchon <obj>, switchoff <obj>, open <obj>, close <obj>, lookat <obj>, sit <obj>, standup, find <obj>, turnto <obj>, drink <obj>, pointat <obj>, watch <obj>, putin <obj> <obj>, putback <obj> <obj>

objects = ['candybar', 'fryingpan', 'stove', 'painkillers', 'peach', 'clock', 'deodorant', 'whippedcream', 'dishbowl', 'ceiling', 'creamybuns', 'bed', 'clothespile', 'stovefan', 'hairproduct', 'mousemat', 'sink', 'kitchen', 'towelrack', 'radio', 'bathroomcabinet', 'stall', 'wineglass', 'paper', 'toothpaste', 'breadslice', 'lime', 'sofa', 'salmon', 'chocolatesyrup', 'bench', 'tablelamp', 'barsoap', 'condimentbottle', 'powersocket', 'cpuscreen', 'toilet', 'candle', 'rug', 'mug', 'condimentshaker', 'nightstand', 'closet', 'curtains', 'wallshelf', 'dishwashingliquid', 'walllamp', 'perfume', 'orchid', 'coffeemaker', 'hanger', 'ceilinglamp', 'fridge', 'waterglass', 'closetdrawer', 'lightswitch', 'facecream', 'clothespants', 'washingmachine', 'computer', 'doorjamb', 'plum', 'floor', 'pie', 'window', 'microwave', 'cellphone', 'oventray', 'wall', 'apple', 'bedroom', 'livingroom', 'cutleryfork', 'bellpepper', 'kitchencabinet', 'faucet', 'kitchentable', 'bathtub', 'cabinet', 'toaster', 'bookshelf', 'desk', 'coffeetable', 'cupcake', 'folder', 'box', 'kitchencounter', 'wallphone', 'door', 'kitchencounterdrawer', 'tvstand', 'chair', 'photoframe', 'plate', 'garbagecan', 'book', 'cereal', 'wallpictureframe', 'washingsponge', 'cutleryknife', 'crackers', 'toothbrush', 'keyboard', 'tv', 'chips', 'bathroom', 'mouse', 'pillow', 'slippers', 'coffeepot', 'clothesshirt', 'bananas', 'remotecontrol', 'towel', 'bathroomcounter']Imagine we are working with a household robot.When you are doing the current task in a room, it is best to limit the scope of your activity to the current room and not to run too far.
         (1) You should think like a human being about how to solve tasks more efficiently.
         (2) When you [find] <obj>, use common sense to think about where the object should exist first in the environment,such as the chip exists in the kitchen,and sofa exists in the living room.
         (3) When you find something, don't look for it again.
         (4) You should think about the relationship between the available objects and the room.
    

def put_the_wine_glass_in_the_kitchen_cabinet():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find wine glass
	find('wineglass')
	# 2: grab wine glass
	assert('close' to 'wineglass')
		else: find('wineglass')
	grab('wineglass')
	# 3: find kitchen cabinet
	find('kitchencabinet')
	# 4: open kitchen cabinet
	assert('close' to 'kitchencabinet' )  
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'closed' )
		else: close('kitchencabinet')
	open('kitchencabinet')
	# 5: put wine glass in kitchen cabinet
	assert('wineglass' in 'hands' )
		else: find('wineglass')
		else: grab('wineglass')
	assert('close' to 'kitchencabinet' )  
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'opened' )
		else: open('kitchencabinet')
	putin('wineglass', 'kitchencabinet')
	# 6: close kitchen cabinet
	assert('close' to 'kitchencabinet' )
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'opened' )
		else: open('kitchencabinet')
	close('kitchencabinet')
	# 7: Done

def throw_away_the_lime():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find garbage can
	find('garbagecan')
	# 2: grab lime
	find('lime')
	assert('close' to 'lime')
		else: find('lime')
	grab('lime')
	# 3: put lime in garbage can
	find('garbagecan')
	assert('close' to 'garbagecan' )  
		else: find('garbagecan')
	assert('garbagecan' is 'closed' )
		else: close('garbagecan')
	open('garbagecan')
	assert('lime' in 'hands' )
		else: find('lime')
		else: grab('lime')
	assert('close' to 'garbagecan' )  
		else: find('garbagecan')
	assert('garbagecan' is 'opened' )
		else: open('garbagecan')
	putin('lime', 'garbagecan')
	assert('close' to 'garbagecan' )
		else: find('garbagecan')
	assert('garbagecan' is 'opened' )
		else: open('garbagecan')
	close('garbagecan')
	# 4: Done

def wash_mug():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find sink
	find('sink')
	# 2: turn on faucet
	find('faucet')
	find('faucet')
	find('faucet')
	assert('close' to 'faucet' )  
		else: find('faucet')
	assert('faucet' is 'switchoff' )
		else: switchoff('faucet')
	switchon('faucet')
	# 3: put mug under water
	find('mug')
	find('mug')
	find('mug')
	assert('close' to 'mug')
		else: find('mug')
	grab('mug')
	find('sink')
	assert('mug' in 'hands' )
		else: find('mug')
		else: grab('mug')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('mug', 'sink')
	# 4: grab dishwashing liquid
	find('dishwashingliquid')
	assert('close' to 'dishwashingliquid')
		else: find('dishwashingliquid')
	grab('dishwashingliquid')
	# 5: put dishwashing liquid on mug
	find('sink')
	assert('dishwashingliquid' in 'hands' )
		else: find('dishwashingliquid')
		else: grab('dishwashingliquid')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('dishwashingliquid', 'sink')
	# 6: grab washingsponge
	find('washingsponge')
	assert('close' to 'washingsponge')
		else: find('washingsponge')
	grab('washingsponge')
	# 7: start scrubbing mug
	find('sink')
	assert('washingsponge' in 'hands' )
		else: find('washingsponge')
		else: grab('washingsponge')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('washingsponge', 'sink')
	# 8: rinse mug off with water 1
	# 9: dry mug with towel 1
	# 10: Done
	find('faucet')
	assert('close' to 'faucet' )
		else: find('faucet')
	assert('faucet' is 'switchon' )
		else: switchon('faucet')
	switchoff('faucet')

----Test set tasks----
['eat chips on the sofa', 'put salmon in the fridge', 'wash the plate', 'bring coffeepot and cupcake to the coffee table', 'microwave salmon', 'watch tv', 'turn off light', 'brush teeth', 'throw away apple', 'make toast']
Total: 10 tasks

----PROMPT for state check----
You see: microwave is OFF and CLOSED, lightswitch is ON, cereal, bookshelf, book is CLOSED, bookshelf ON floor, microwave ON kitchencounterdrawer, salmon ON microwave, book INSIDE bookshelf, dishbowl INSIDE bookshelf, clothespile INSIDE bookshelf, bananas INSIDE bookshelf, box ON bookshelf, book ON kitchentable, dishbowl ON bookshelf, condimentshaker INSIDE bookshelf, box INSIDE bookshelf, character HOLD_RH book, book ON rug, cereal ON wallshelf, plate INSIDE microwave, condimentbottle INSIDE bookshelf, microwave ON kitchencounter, paper INSIDE bookshelf

assert('close' to 'mug' )
False
assert('close' to 'microwave' )
True
assert('book' is 'closed' )
True
assert('lightswitch' is 'OFF')
False
assert('book' in 'bookshelf')
True
assert('book' in 'hands')
True
assert('cereal' on 'bookshelf')
False

--Executing task: eat chips on the sofa--
Plan:  It looks like you're building a set of functions for a household robot to perform various tasks. Let's continue with the task of eating chips on the sofa:

```python
def eat_chips_on_the_sofa():
    # 0: walk to living room
    walk('livingroom')
    # 1: find chips
    find('chips')
    # 2: grab chips
    assert('close' to 'chips')
    else: find('chips')
    grab('chips')
    # 3: find sofa
    find('sofa')
    # 4: sit on sofa
    sit('sofa')
    # 5: enjoy chips
    # 6: Done
```

This function will make the robot walk to the living room, find and grab a bag of chips, find the sofa, sit on it, and then enjoy the chips.

<char0> [walk] <livingroom> (335)
<char0> [find] <chips> (329)
State check:
You see: chips, chips ON wallshelf.
assert('close' to 'chips')
False
<char0> [find] <chips> (328)
State check:
You see: chips, chips ON wallshelf.
grab('chips')
You grabbed the chips from the wallshelf.
<char0> [grab] <chips> (329)
<char0> [find] <sofa> (368)
<char0> [sit] <sofa> (368)
bad action
bad action

--Executing task: put salmon in the fridge--
Plan:  It looks like you were in the middle of writing a script for a household robot to perform certain tasks. If you need help completing the `put_salmon_in_the_fridge` function or have any other questions, feel free to ask!

