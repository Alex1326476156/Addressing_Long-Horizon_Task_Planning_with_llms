
----PROMPT for planning----
from actions import turnright, turnleft, walkforward, walktowards <obj>, walk <obj>, run <obj>, grab <obj>, switchon <obj>, switchoff <obj>, open <obj>, close <obj>, lookat <obj>, sit <obj>, standup, find <obj>, turnto <obj>, drink <obj>, pointat <obj>, watch <obj>, putin <obj> <obj>, putback <obj> <obj>Imagine we are working with a household robot.When you are doing the current task in a room, it is best to limit the scope of your activity to the current room and not to run too far.
         (1) You should think like a human being about how to solve tasks more efficiently.
         (2) According to the training set I gave you, the location of the object or robot needs to confirm the conditions that need to be met before proceeding to the next action that should be performed.
         (3) When you go looking for something, use common sense to think about where it should appear first in the env.
         (4) You should think about the relationship between the available objects and the room.
         (5) About the task:"eat chips on the sofa",you need open the chip bag at last.
             Here are all the available objects in the env.
             

objects = ['peach', 'stovefan', 'facecream', 'clothespants', 'fridge', 'deodorant', 'chair', 'cutleryknife', 'lightswitch', 'breadslice', 'wineglass', 'bellpepper', 'window', 'plum', 'toilet', 'clothespile', 'bathroomcounter', 'faucet', 'bananas', 'mousemat', 'kitchen', 'floor', 'powersocket', 'bookshelf', 'kitchencabinet', 'condimentbottle', 'whippedcream', 'ceilinglamp', 'clothesshirt', 'walllamp', 'folder', 'creamybuns', 'candle', 'cellphone', 'chips', 'doorjamb', 'coffeetable', 'lime', 'box', 'wallphone', 'mouse', 'cpuscreen', 'dishwashingliquid', 'candybar', 'computer', 'slippers', 'bedroom', 'closet', 'tv', 'plate', 'dishbowl', 'mug', 'paper', 'wallpictureframe', 'towel', 'orchid', 'closetdrawer', 'sink', 'nightstand', 'microwave', 'pillow', 'stall', 'toothbrush', 'rug', 'keyboard', 'coffeepot', 'bathroom', 'cupcake', 'kitchentable', 'radio', 'door', 'chocolatesyrup', 'crackers', 'salmon', 'towelrack', 'tablelamp', 'toothpaste', 'cutleryfork', 'cereal', 'garbagecan', 'photoframe', 'wall', 'bench', 'cabinet', 'bathtub', 'hairproduct', 'pie', 'curtains', 'washingsponge', 'fryingpan', 'wallshelf', 'bathroomcabinet', 'oventray', 'washingmachine', 'desk', 'ceiling', 'clock', 'kitchencounter', 'kitchencounterdrawer', 'book', 'barsoap', 'perfume', 'apple', 'waterglass', 'livingroom', 'hanger', 'condimentshaker', 'stove', 'painkillers', 'remotecontrol', 'sofa', 'bed', 'toaster', 'tvstand', 'coffeemaker']

def put_the_wine_glass_in_the_kitchen_cabinet():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find wine glass
	find('wineglass')
	# 2: grab wine glass
	assert('close' to 'wineglass')
		else: find('wineglass')
	grab('wineglass')
	# 3: find kitchen cabinet
	find('kitchencabinet')
	# 4: open kitchen cabinet
	assert('close' to 'kitchencabinet' )  
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'closed' )
		else: close('kitchencabinet')
	open('kitchencabinet')
	# 5: put wine glass in kitchen cabinet
	assert('wineglass' in 'hands' )
		else: find('wineglass')
		else: grab('wineglass')
	assert('close' to 'kitchencabinet' )  
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'opened' )
		else: open('kitchencabinet')
	putin('wineglass', 'kitchencabinet')
	# 6: close kitchen cabinet
	assert('close' to 'kitchencabinet' )
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'opened' )
		else: open('kitchencabinet')
	close('kitchencabinet')
	# 7: Done

def throw_away_the_lime():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find garbage can
	find('garbagecan')
	# 2: grab lime
	find('lime')
	assert('close' to 'lime')
		else: find('lime')
	grab('lime')
	# 3: put lime in garbage can
	find('garbagecan')
	assert('close' to 'garbagecan' )  
		else: find('garbagecan')
	assert('garbagecan' is 'closed' )
		else: close('garbagecan')
	open('garbagecan')
	assert('lime' in 'hands' )
		else: find('lime')
		else: grab('lime')
	assert('close' to 'garbagecan' )  
		else: find('garbagecan')
	assert('garbagecan' is 'opened' )
		else: open('garbagecan')
	putin('lime', 'garbagecan')
	assert('close' to 'garbagecan' )
		else: find('garbagecan')
	assert('garbagecan' is 'opened' )
		else: open('garbagecan')
	close('garbagecan')
	# 4: Done

def wash_mug():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find sink
	find('sink')
	# 2: turn on faucet
	find('faucet')
	find('faucet')
	find('faucet')
	assert('close' to 'faucet' )  
		else: find('faucet')
	assert('faucet' is 'switchoff' )
		else: switchoff('faucet')
	switchon('faucet')
	# 3: put mug under water
	find('mug')
	find('mug')
	find('mug')
	assert('close' to 'mug')
		else: find('mug')
	grab('mug')
	find('sink')
	assert('mug' in 'hands' )
		else: find('mug')
		else: grab('mug')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('mug', 'sink')
	# 4: grab dishwashing liquid
	find('dishwashingliquid')
	assert('close' to 'dishwashingliquid')
		else: find('dishwashingliquid')
	grab('dishwashingliquid')
	# 5: put dishwashing liquid on mug
	find('sink')
	assert('dishwashingliquid' in 'hands' )
		else: find('dishwashingliquid')
		else: grab('dishwashingliquid')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('dishwashingliquid', 'sink')
	# 6: grab washingsponge
	find('washingsponge')
	assert('close' to 'washingsponge')
		else: find('washingsponge')
	grab('washingsponge')
	# 7: start scrubbing mug
	find('sink')
	assert('washingsponge' in 'hands' )
		else: find('washingsponge')
		else: grab('washingsponge')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('washingsponge', 'sink')
	# 8: rinse mug off with water 1
	# 9: dry mug with towel 1
	# 10: Done
	find('faucet')
	assert('close' to 'faucet' )
		else: find('faucet')
	assert('faucet' is 'switchon' )
		else: switchon('faucet')
	switchoff('faucet')

----Test set tasks----
['eat chips on the sofa', 'put salmon in the fridge', 'wash the plate', 'bring coffeepot and cupcake to the coffee table', 'microwave salmon', 'watch tv', 'turn off light', 'brush teeth', 'throw away apple', 'make toast']
Total: 10 tasks

----PROMPT for state check----
You see: microwave is OFF and CLOSED, lightswitch is ON, cereal, bookshelf, book is CLOSED, bookshelf ON floor, microwave ON kitchencounterdrawer, salmon ON microwave, book INSIDE bookshelf, dishbowl INSIDE bookshelf, clothespile INSIDE bookshelf, bananas INSIDE bookshelf, box ON bookshelf, book ON kitchentable, dishbowl ON bookshelf, condimentshaker INSIDE bookshelf, box INSIDE bookshelf, character HOLD_RH book, book ON rug, cereal ON wallshelf, plate INSIDE microwave, condimentbottle INSIDE bookshelf, microwave ON kitchencounter, paper INSIDE bookshelf

assert('close' to 'mug' )
False
assert('close' to 'microwave' )
True
assert('book' is 'closed' )
True
assert('lightswitch' is 'OFF')
False
assert('book' in 'bookshelf')
True
assert('book' in 'hands')
True
assert('cereal' on 'bookshelf')
False

--Executing task: eat chips on the sofa--
Plan:  To complete the task "eat chips on the sofa," we need to follow a series of actions. Here is the continuation of the task:

```python
# 0: walk to living room
walk('livingroom')
# 1: find chips
find('chips')
# 2: grab chips
assert('close' to 'chips')
    else: find('chips')
grab('chips')
# 3: walk to sofa
walk('sofa')
# 4: sit on sofa
sit('sofa')
# 5: open chips bag
find('chips')
assert('close

<char0> [walk] <livingroom> (335)
<char0> [find] <chips> (329)
State check:
You see: chips, chips ON wallshelf.
assert('close' to 'chips')
False
<char0> [find] <chips> (329)
State check:
You see: chips, chips ON wallshelf.
grab('chips')
You grab
<char0> [grab] <chips> (329)
<char0> [walk] <sofa> (368)
<char0> [sit] <sofa> (368)
<char0> [find] <chips> (328)
act_success: False, message: <character> (1) is not close to <chips> (328) when executing "[FIND] <chips> (328) [0]"
State check:
You see: 
assert('close
I'm

--Executing task: put salmon in the fridge--
Plan:  # 0: walk to kitchen
walk('kitchen')
# 1: find salmon
find('salmon')
# 2: grab salmon
assert('close' to 'salmon')
    else: find('salmon')
grab('salmon')
# 3: find fridge
find('fridge')
# 4: open fridge
assert('close' to 'fridge' )  
    else: find('fridge')
assert('fridge' is 'closed' )
    else: close('fridge')
open('fridge')
# 5: put salmon in fridge
assert('salmon

<char0> [walk] <kitchen> (205)
<char0> [find] <salmon> (327)
State check:
You see: salmon, salmon ON microwave.
assert('close' to 'salmon')
True
<char0> [grab] <salmon> (327)
<char0> [find] <fridge> (305)
State check:
You see: fridge is CLOSED, fridge ON floor.  You have salmon.
assert('close' to 'fridge' )
True
State check:
You see: fridge is CLOSED, fridge ON floor.  You have salmon.
assert('fridge' is 'closed' )
True
<char0> [open] <fridge> (305)
State check:
You see: salmon, fridge ON floor.  You have salmon.
assert('salmon
I'm

--Executing task: wash the plate--
Plan:  # 0: walk to kitchen
walk('kitchen')
# 1: find sink
find('sink')
# 2: turn on faucet
find('faucet')
find('faucet')
find('faucet')
assert('close' to 'faucet' )  
    else: find('faucet')
assert('faucet' is 'switchoff' )
    else: switchoff('faucet')
switchon('faucet')
# 3: put plate under water
find('plate')
find('plate')
find('plate')
assert('close

<char0> [walk] <kitchen> (205)
<char0> [find] <sink> (247)
<char0> [find] <faucet> (50)
<char0> [find] <faucet> (248)
<char0> [find] <faucet> (248)
State check:
You see: faucet is OFF, faucet ON kitchencounter.
assert('close' to 'faucet' )
False
<char0> [find] <faucet> (50)
State check:
You see: faucet is OFF, faucet ON bathroomcounter.
assert('faucet' is 'switchoff' )
False
<char0> [switchoff] <faucet> (50)
act_success: False, message: <faucet> (50) is not on when executing "[SWITCHOFF] <faucet> (50) [0]"
State check:
You see: faucet is OFF, faucet ON bathroomcounter.
switchon('faucet')
The faucet
<char0> [switchon] <faucet> (50)
<char0> [find] <plate> (285)
<char0> [find] <plate> (193)
<char0> [find] <plate> (285)
State check:
You see: 
assert('close
I'm

--Executing task: bring coffeepot and cupcake to the coffee table--
Plan:  # 0: walk to kitchen
walk('kitchen')
# 1: find coffeepot
find('coffeepot')
# 2: grab coffeepot
assert('close' to 'coffeepot')
    else: find('coffeepot')
grab('coffeepot')
# 3: find cupcake
find('cupcake')
# 4: grab cupcake
assert('close' to 'cupcake')
    else: find('cupcake')
grab('cupcake')
# 5: walk to living room
walk('livingroom')
# 6

<char0> [walk] <kitchen> (205)
<char0> [find] <coffeepot> (307)
State check:
You see: coffeepot is CLOSED, coffeepot INSIDE coffeemaker, coffeepot ON kitchencounter.
assert('close' to 'coffeepot')
True
<char0> [grab] <coffeepot> (307)
<char0> [find] <cupcake> (196)
State check:
You see: cupcake, cupcake ON desk.  You have coffeepot.
assert('close' to 'cupcake')
False
<char0> [find] <cupcake> (196)
State check:
You see: cupcake, cupcake ON desk.  You have coffeepot.
grab('cupcake')
You grab
<char0> [grab] <cupcake> (195)
<char0> [walk] <livingroom> (335)

--Executing task: microwave salmon--
Plan:  # 0: walk to kitchen
walk('kitchen')
# 1: find microwave
find('microwave')
# 2: open microwave
assert('close' to 'microwave')
    else: find('microwave')
assert('microwave' is 'closed')
    else: close('microwave')
open('microwave')
# 3: find salmon
find('salmon')
# 4: put salmon in microwave
assert('close' to 'salmon')
    else: find('salmon')
grab('salmon')
assert('close' to 'microwave')
    else: find('

<char0> [walk] <kitchen> (205)
<char0> [find] <microwave> (313)
State check:
You see: microwave is OFF and CLOSED, microwave ON kitchencounter, plate INSIDE microwave, microwave ON kitchencounterdrawer.
assert('close' to 'microwave')
True
State check:
You see: microwave is OFF and CLOSED, microwave ON kitchencounter, plate INSIDE microwave, microwave ON kitchencounterdrawer.
assert('microwave' is 'closed')
False
<char0> [close] <microwave> (313)
act_success: False, message: <microwave> (313) is not open when executing "[CLOSE] <microwave> (313) [0]"
State check:
You see: microwave is OFF and CLOSED, microwave ON kitchencounter, plate INSIDE microwave, microwave ON kitchencounterdrawer.
open('microwave')
The microwave
<char0> [open] <microwave> (313)
<char0> [find] <salmon> (327)
State check:
You see: salmon, salmon ON microwave
assert('close' to 'salmon')
True
<char0> [grab] <salmon> (327)
State check:
You see: microwave is OFF and OPEN, microwave ON kitchencounter, plate INSIDE microwave, microwave ON kitchencounterdrawer.  You have salmon.
assert('close' to 'microwave')
True

--Executing task: watch tv--
Plan:  # 0: walk to living room
walk('livingroom')
# 1: find TV
find('tv')
# 2: turn on TV
find('tv')
assert('close' to 'tv')
    else: find('tv')
switchon('tv')
# 3: sit on sofa
find('sofa')
assert('close' to 'sofa')
    else: find('sofa')
sit('sofa')
# 4: watch TV
watch('tv')
# 5: stand up from sofa
standup()
# 6: Done

<char0> [walk] <livingroom> (335)
<char0> [find] <tv> (426)
<char0> [find] <tv> (426)
State check:
You see: tvstand, tv is OFF, tv ON tvstand.
assert('close' to 'tv')
False
<char0> [find] <tv> (426)
State check:
You see: tvstand, tv is OFF, tv ON tvstand.
switchon('tv')
The TV
<char0> [switchon] <tv> (426)
<char0> [find] <sofa> (368)
State check:
You see: sofa, sofa ON rug.
assert('close' to 'sofa')
False
<char0> [find] <sofa> (368)
State check:
You see: sofa, sofa ON rug.
sit('sofa')
I'm
<char0> [sit] <sofa> (368)
<char0> [watch] <tv> (264)
act_success: False, message: char room <livingroom> (335) is not node room <kitchen> (205) when executing "[WATCH] <tv> (264) [0]"
<char0> [standup]

--Executing task: turn off light--
Plan:  # 0: walk to living room
walk('livingroom')
# 1: find light switch
find('lightswitch')
# 2: switch off the light
assert('close' to 'lightswitch')
    else: find('lightswitch')
switchoff('lightswitch')
# 3: Done

<char0> [walk] <livingroom> (335)
<char0> [find] <lightswitch> (427)
State check:
You see: lightswitch is ON
assert('close' to 'lightswitch')
True
<char0> [switchoff] <lightswitch> (173)
act_success: False, message: <character> (1) is not close to <lightswitch> (173) when executing "[SWITCHOFF] <lightswitch> (173) [0]"

--Executing task: brush teeth--
Plan:  # 0: walk to bathroom
walk('bathroom')
# 1: find toothbrush
find('toothbrush')
# 2: grab toothbrush
assert('close' to 'toothbrush')
    else: find('toothbrush')
grab('toothbrush')
# 3: find toothpaste
find('toothpaste')
# 4: grab toothpaste
assert('close' to 'toothpaste')
    else: find('toothpaste')
grab('toothpaste')
# 5: apply toothpaste to toothbrush
assert('toothbrush' in 'hands')

<char0> [walk] <bathroom> (11)
<char0> [find] <toothbrush> (65)
State check:
You see: toothbrush, toothbrush ON bathroomcounter.
assert('close' to 'toothbrush')
True
<char0> [grab] <toothbrush> (65)
<char0> [find] <toothpaste> (62)
State check:
You see: toothpaste is CLOSED, toothpaste ON bathroomcounter.  You have toothbrush.
assert('close' to 'toothpaste')
True
<char0> [grab] <toothpaste> (62)
State check:
You see: toothbrush, toothbrush.
assert('toothbrush' in 'hands')
True

--Executing task: throw away apple--
Plan:  # 0: walk to kitchen
walk('kitchen')
# 1: find garbage can
find('garbagecan')
# 2: grab apple
find('apple')
assert('close' to 'apple')
    else: find('apple')
grab('apple')
# 3: put apple in garbage can
find('garbagecan')
assert('close' to 'garbagecan' )  
    else: find('garbagecan')
assert('garbagecan' is 'closed' )
    else: close('garbagecan')
open('garbagecan')
assert('apple' in 'hands'

<char0> [walk] <kitchen> (205)
<char0> [find] <garbagecan> (229)
<char0> [find] <apple> (438)
State check:
You see: apple, apple ON coffeetable.
assert('close' to 'apple')
False
<char0> [find] <apple> (438)
State check:
You see: apple, apple ON coffeetable.
grab('apple')
I'm
<char0> [grab] <apple> (437)
<char0> [find] <garbagecan> (229)
State check:
You see: garbagecan is CLOSED
assert('close' to 'garbagecan' )
True
State check:
You see: garbagecan is CLOSED
assert('garbagecan' is 'closed' )
False
<char0> [close] <garbagecan> (229)
act_success: False, message: <garbagecan> (229) is not open when executing "[CLOSE] <garbagecan> (229) [0]"
State check:
You see: garbagecan is CLOSED
open('garbagecan')
The garbage
<char0> [open] <garbagecan> (229)
State check:
You see: apple, .  You have apple.
assert('apple' in 'hands'
True

--Executing task: make toast--
Plan:  # 0: walk to kitchen
walk('kitchen')
# 1: find toaster
find('toaster')
# 2: find bread slice
find('breadslice')
# 3: grab bread slice
assert('close' to 'breadslice')
    else: find('breadslice')
grab('breadslice')
# 4: put bread slice in toaster
assert('breadslice' in 'hands')
    else: find('breadslice')
    else: grab('breadslice')
assert('close' to 'toaster')
    else: find('toaster')
putin('breadslice', 'to

<char0> [walk] <kitchen> (205)
<char0> [find] <toaster> (308)
<char0> [find] <breadslice> (310)
State check:
You see: breadslice, breadslice INSIDE toaster.
assert('close' to 'breadslice')
True
<char0> [grab] <breadslice> (309)
act_success: False, message: <character> (1) is not close to <breadslice> (309) when executing "[GRAB] <breadslice> (309) [0]"
State check:
You see: breadslice, breadslice INSIDE toaster.
assert('breadslice' in 'hands')
False
<char0> [find] <breadslice> (310)
<char0> [grab] <breadslice> (310)
State check:
You see: toaster is OFF
assert('close' to 'toaster')
False
<char0> [find] <toaster> (308)
State check:
You see: toaster is OFF
putin('breadslice', 'to
I'm
obj not found

unsatisfied state conditions: relations: {'character CLOSE tv', 'tv CLOSE character', 'character CLOSE tvstand', 'tvstand CLOSE character'}, object states: {'tv ON'}
unsatisfied state conditions: relations: {'creamybuns FACING tv', 'character INSIDE bathroom'}, object states: {'lightswitch OFF'}
unsatisfied state conditions: relations: {'character INSIDE bathroom', 'character CLOSE toothbrush', 'bathroomcounter CLOSE character', 'character CLOSE toothpaste', 'toothpaste CLOSE toothbrush', 'toothbrush CLOSE toothpaste', 'character HOLDS_RH toothbrush', 'toothpaste CLOSE character', 'character CLOSE bathroomcounter', 'toothpaste INSIDE toothbrush', 'toothbrush CLOSE character'}, object states: set()
unsatisfied state conditions: relations: {'apple INSIDE garbagecan', 'garbagecan CLOSE apple', 'character CLOSE apple', 'apple CLOSE garbagecan', 'apple CLOSE character'}, object states: set()
unsatisfied state conditions: relations: {'character HOLDS_RH breadslice'}, object states: set()
unsatisfied state conditions: relations: {'character HOLDS_RH chips', 'chips CLOSE character', 'character CLOSE chips'}, object states: {'character SITTING'}
unsatisfied state conditions: relations: {'salmon CLOSE fridge', 'fridge CLOSE salmon', 'character CLOSE floor', 'salmon CLOSE character', 'salmon INSIDE fridge', 'character CLOSE fridge', 'floor CLOSE character', 'character CLOSE salmon', 'fridge CLOSE character'}, object states: set()
unsatisfied state conditions: relations: {'sink CLOSE dishwashingliquid', 'pie FACING clock', 'plate CLOSE sink', 'dishwashingliquid INSIDE sink', 'faucet CLOSE character', 'book FACING clock', 'sink CLOSE plate', 'whippedcream FACING clock', 'character CLOSE faucet', 'cutleryfork FACING clock', 'dishwashingliquid CLOSE sink', 'plate INSIDE sink'}, object states: set()
unsatisfied state conditions: relations: {'coffeetable CLOSE character', 'character INSIDE bedroom', 'coffeepot CLOSE character', 'character CLOSE floor', 'cupcake CLOSE character', 'cupcake ON coffeetable', 'coffeepot CLOSE coffeetable', 'coffeepot INSIDE bedroom', 'character CLOSE coffeepot', 'character CLOSE coffeetable', 'coffeepot ON coffeetable', 'floor CLOSE character', 'cupcake CLOSE coffeetable', 'coffeetable CLOSE coffeepot', 'coffeetable CLOSE cupcake', 'character CLOSE cupcake'}, object states: set()
unsatisfied state conditions: relations: {'sink CLOSE character', 'bellpepper CLOSE character', 'garbagecan CLOSE character', 'character CLOSE kitchencounterdrawer', 'character CLOSE microwave', 'character CLOSE wallphone', 'character CLOSE kitchencabinet', 'clock CLOSE character', 'character CLOSE garbagecan', 'wallphone CLOSE character', 'character CLOSE kitchencounter', 'kitchencounterdrawer CLOSE character', 'character CLOSE sink', 'kitchencounter CLOSE character', 'wallpictureframe CLOSE character', 'kitchencabinet CLOSE character', 'character CLOSE bellpepper', 'salmon CLOSE character', 'character CLOSE wallpictureframe', 'microwave CLOSE character', 'character CLOSE salmon', 'character HOLDS_RH salmon', 'character CLOSE clock'}, object states: set()