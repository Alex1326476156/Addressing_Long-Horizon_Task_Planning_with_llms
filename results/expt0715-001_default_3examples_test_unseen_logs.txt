
----PROMPT for planning----
You are an assistant helping me with the simulator for a household robot.You have access to the following functions:
        walk <obj>:Walk to the specified location.
        run <obj>:Move quickly towards the specified object or location.
        switchon <obj>:Turn on the specified object or device if it is off.
        switchoff <obj>:Turn off the specified object or device if it is on.
        lookat <obj>:Look at or observe the specified object.
        find <obj>:Find the specified object.
        watch <obj>:Watch the specified object or activity.
        Attention:
        You are only allowed to use the functions that are delimited by triple backticks.
        You are not allowed to use any other hypothetical functions.

objects = ['toaster', 'mug', 'coffeemaker', 'livingroom', 'book', 'creamybuns', 'pillow', 'facecream', 'closetdrawer', 'peach', 'bedroom', 'washingsponge', 'bellpepper', 'garbagecan', 'kitchentable', 'bed', 'folder', 'microwave', 'wallshelf', 'bench', 'cpuscreen', 'cupcake', 'chocolatesyrup', 'rug', 'faucet', 'wall', 'toothbrush', 'oventray', 'computer', 'dishbowl', 'bathtub', 'apple', 'floor', 'towel', 'bathroom', 'cereal', 'candybar', 'clothespants', 'radio', 'toilet', 'condimentshaker', 'dishwashingliquid', 'bathroomcabinet', 'whippedcream', 'doorjamb', 'clothesshirt', 'stall', 'sink', 'powersocket', 'kitchen', 'crackers', 'lightswitch', 'kitchencounterdrawer', 'deodorant', 'toothpaste', 'clock', 'coffeepot', 'paper', 'desk', 'coffeetable', 'chips', 'wallphone', 'orchid', 'cutleryknife', 'tablelamp', 'condimentbottle', 'cutleryfork', 'kitchencabinet', 'chair', 'ceilinglamp', 'bananas', 'slippers', 'wineglass', 'barsoap', 'pie', 'keyboard', 'plum', 'plate', 'walllamp', 'fryingpan', 'candle', 'tvstand', 'box', 'wallpictureframe', 'clothespile', 'nightstand', 'photoframe', 'ceiling', 'sofa', 'salmon', 'bookshelf', 'mousemat', 'curtains', 'hairproduct', 'kitchencounter', 'tv', 'cellphone', 'washingmachine', 'window', 'lime', 'towelrack', 'hanger', 'remotecontrol', 'fridge', 'stovefan', 'perfume', 'stove', 'waterglass', 'cabinet', 'bathroomcounter', 'painkillers', 'mouse', 'door', 'breadslice', 'closet']
	Properties and Interaction Methods of Items = {
        "tv": {
            "location": "living room",
            "status": "off",
            "type": "electronic device",
            "actions": ["find", "switchon", "switchoff"]
        }
    }The most important things you must follow:
    Note that before you search for a object, you must go to the room where the object is located. This is to ensure that you can find it in the correct location.
    When you're searching for something, you must first locate it based on the information I provide you.
    Attention to the correct use of electrical appliances.
    More specifically,you need to turn off electrical devices or close faucets after completing their tasks.
    Add 'assert' after finding an object to ensure the success rate of grabbing the object or being close enough to it.
    You must give your complete solution without missing any steps or I will punish you.
    
    Below, I give the example for our interaction,you should give your analysis:'''
    Me:def bring_pillow_to_the_sofa() You:It seems like you want to create a function to simulate bring pillow to the sofa. Let's break down the steps and write the function accordingly:
    1.walk to the bedroom to find pillow 2.find pillow 3.grab pillow 4.walk to the living room to find sofa 5.walk to the sofa 6.find the sofa 7.put pillow on sofa
    and then give your solution after learning the examples.'''
    
    Do not call the function at last.
    
    
    You should give your analysis and find the sequence of steps,then give your function after learning from the examples.
    Here are the examples you need to learn:

def put_the_wine_glass_in_the_kitchen_cabinet():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find wine glass
	find('wineglass')
	# 2: grab wine glass
	assert('close' to 'wineglass')
		else: find('wineglass')
	grab('wineglass')
	# 3: find kitchen cabinet
	find('kitchencabinet')
	# 4: open kitchen cabinet
	assert('close' to 'kitchencabinet' )  
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'closed' )
		else: close('kitchencabinet')
	open('kitchencabinet')
	# 5: put wine glass in kitchen cabinet
	assert('wineglass' in 'hands' )
		else: find('wineglass')
		else: grab('wineglass')
	assert('close' to 'kitchencabinet' )  
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'opened' )
		else: open('kitchencabinet')
	putin('wineglass', 'kitchencabinet')
	# 6: close kitchen cabinet
	assert('close' to 'kitchencabinet' )
		else: find('kitchencabinet')
	assert('kitchencabinet' is 'opened' )
		else: open('kitchencabinet')
	close('kitchencabinet')
	# 7: Done



def throw_away_the_lime():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find garbage can
	find('garbagecan')
	# 2: grab lime
	find('lime')
	assert('close' to 'lime')
		else: find('lime')
	grab('lime')
	# 3: put lime in garbage can
	find('garbagecan')
	assert('close' to 'garbagecan' )  
		else: find('garbagecan')
	assert('garbagecan' is 'closed' )
		else: close('garbagecan')
	open('garbagecan')
	assert('lime' in 'hands' )
		else: find('lime')
		else: grab('lime')
	assert('close' to 'garbagecan' )  
		else: find('garbagecan')
	assert('garbagecan' is 'opened' )
		else: open('garbagecan')
	putin('lime', 'garbagecan')
	assert('close' to 'garbagecan' )
		else: find('garbagecan')
	assert('garbagecan' is 'opened' )
		else: open('garbagecan')
	close('garbagecan')
	# 4: Done



def wash_mug():
	# 0: walk to kitchen
	walk('kitchen')
	# 1: find sink
	find('sink')
	# 2: turn on faucet
	find('faucet')
	find('faucet')
	find('faucet')
	assert('close' to 'faucet' )  
		else: find('faucet')
	assert('faucet' is 'switchoff' )
		else: switchoff('faucet')
	switchon('faucet')
	# 3: put mug under water
	find('mug')
	find('mug')
	find('mug')
	assert('close' to 'mug')
		else: find('mug')
	grab('mug')
	find('sink')
	assert('mug' in 'hands' )
		else: find('mug')
		else: grab('mug')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('mug', 'sink')
	# 4: grab dishwashing liquid
	find('dishwashingliquid')
	assert('close' to 'dishwashingliquid')
		else: find('dishwashingliquid')
	grab('dishwashingliquid')
	# 5: put dishwashing liquid on mug
	find('sink')
	assert('dishwashingliquid' in 'hands' )
		else: find('dishwashingliquid')
		else: grab('dishwashingliquid')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('dishwashingliquid', 'sink')
	# 6: grab washingsponge
	find('washingsponge')
	assert('close' to 'washingsponge')
		else: find('washingsponge')
	grab('washingsponge')
	# 7: start scrubbing mug
	find('sink')
	assert('washingsponge' in 'hands' )
		else: find('washingsponge')
		else: grab('washingsponge')
	assert('close' to 'sink' )  
		else: find('sink')
	putin('washingsponge', 'sink')
	# 8: rinse mug off with water 1
	# 9: dry mug with towel 1
	# 10: Done
	find('faucet')
	assert('close' to 'faucet' )
		else: find('faucet')
	assert('faucet' is 'switchon' )
		else: switchon('faucet')
	switchoff('faucet')



----Test set tasks----
['watch tv']
Total: 1 tasks

----PROMPT for state check----
You see: microwave is OFF and CLOSED, lightswitch is ON, cereal, bookshelf, book is CLOSED, bookshelf ON floor, microwave ON kitchencounterdrawer, salmon ON microwave, book INSIDE bookshelf, dishbowl INSIDE bookshelf, clothespile INSIDE bookshelf, bananas INSIDE bookshelf, box ON bookshelf, book ON kitchentable, dishbowl ON bookshelf, condimentshaker INSIDE bookshelf, box INSIDE bookshelf, character HOLD_RH book, book ON rug, cereal ON wallshelf, plate INSIDE microwave, condimentbottle INSIDE bookshelf, microwave ON kitchencounter, paper INSIDE bookshelf

assert('close' to 'mug' )
False
assert('close' to 'microwave' )
True
assert('book' is 'closed' )
True
assert('lightswitch' is 'OFF')
False
assert('book' in 'bookshelf')
True
assert('book' in 'hands')
True
assert('cereal' on 'bookshelf')
False

--Executing task: watch_tv--
Plan:  
            def watch_tv():
    # 0: Walk to the living room
    walk('livingroom')

    # 1: Find the TV
    find('tv')

    # 2: Turn on the TV
    switchon('tv')

    # 3: Sit on the sofa
    

    # 4: Point at the TV
    

    # 5: Watch TV
    watch('tv')

    # 6: Stand up
    

    # 7: Done
    

<char0> [walk] <livingroom> (335)
<char0> [find] <tv> (426)
<char0> [switchon] <tv> (264)
act_success: False, message: <character> (1) is not close to <tv> (264) when executing "[SWITCHON] <tv> (264) [0]"
<char0> [watch] <tv> (426)
act_success: False, message: <character> (1) is not close to <tv> (264) when executing "[SWITCHON] <tv> (264) [0]",<character> (1) does not face <tv> (426) when executing "[WATCH] <tv> (426) [0]"

unsatisfied state conditions: relations: {'character INSIDE bathroom'}, object states: {'lightswitch OFF'}